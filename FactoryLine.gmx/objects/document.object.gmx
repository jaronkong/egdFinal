<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>document_spr</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Setup

sprite_index = document_spr;
smallSprite = documentSmallConfirm_spr;

text = "hello#this is a test";

width = sprite_width;
height = sprite_height;

targetX = x;
targetY = y;
moveTween = 0.2;

targetXScale = 0.1;
targetYScale = 0.1;
scaleXTween = 0.2;
scaleYTween = 0.2;

baseDepth = -110;
raisedDepth = -120;

//Hover and drag float effects
floatOffset = 2;
floatOffsetDrag = 8;
floatOffset_current = 0;
floatOffset_target = 0;
floatOffset_tween = 0.2;

dragging = false;
dragTolerance = 2; //For detecting if just click in place
dragClickPointX = mouse_x;
dragClickPointY = mouse_y;
dragOffsetX = 0;
dragOffsetY = 0;

//Perspective Tweening
fullscale = false;
perspectiveSmallScale = 0.15; //How much smaller the small doc is

perspectiveTiltScale = 0.3; //Lower numbers = shallower depth
perspectiveTiltScale_current = 0;
perspectiveTiltScale_target = 0.3;
perspectiveTiltScale_tween = 0.2;

smallSpriteAlpha_current = 0;
smallSpriteAlpha_target = 0;
smallSpriteAlpha_tween = 0.1;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Tween

floatOffset_current = lerp( floatOffset_current, floatOffset_target, floatOffset_tween );
x = lerp( x, targetX, moveTween );
y = lerp( y, targetY, moveTween );
image_xscale = lerp( image_xscale, targetXScale, scaleXTween );
image_yscale = lerp( image_yscale, targetYScale, scaleYTween );
perspectiveTiltScale_current = lerp( perspectiveTiltScale_current, perspectiveTiltScale_target, perspectiveTiltScale_tween );
smallSpriteAlpha_current = lerp( smallSpriteAlpha_current, smallSpriteAlpha_target, smallSpriteAlpha_tween );

deskSnapDocumentTo( id );
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Hover and drag

if ( dragging ) {
    x = mouse_x + dragOffsetX;
    y = mouse_y + dragOffsetY;
    targetX = x;
    targetY = y;
}
if ( dragging ) {
    if ( mouse_check_button_released( mb_left ) ) {
        dragging = false;
    }

}

if ( mouseHoverOn( id ) ) {
    floatOffset_target = floatOffset;
    depth = raisedDepth;
    
    if ( mouseClicked( id ) ) {
        //Dragging, get the offset to the mouse
        dragClickPointX = mouse_x;
        dragClickPointY = mouse_y;
        dragOffsetX = x - mouse_x;
        dragOffsetY = y - mouse_y;
    }
    if ( mouseDownOn( id ) ) {
        dragging = true;
        floatOffset_target = floatOffsetDrag;
    }
}
else {
    floatOffset_target = 0;
    depth = baseDepth;
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Perspective transforming

if (
    //Clicking to make big 
    (mouseReleased( id ) 
    &amp;&amp; point_distance( mouse_x, mouse_y, dragClickPointX, dragClickPointY ) &lt; dragTolerance)
    
    ||
    //Drag from desk to make big
    (dragging &amp;&amp; !fullscale &amp;&amp; !deskIsOn( id ))
    
    ||
    //Drag back to desk to make big
    (dragging &amp;&amp; fullscale &amp;&amp; deskIsOn( id ))
      ) { 
    
    fullscale = !fullscale;
    
    if ( fullscale ) {
        deskDocSetScale( id, true );
    }
    else {
        deskDocSetScale( id, false );
    }
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string></string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw

var tHalfWidth = width / 2 * image_xscale;
var tHalfHeight = height / 2 * image_yscale;
var tWidthTiltOffset = tHalfWidth * perspectiveTiltScale_current;
var tHeightTiltOffset = tHalfHeight * perspectiveTiltScale_current;

draw_sprite_pos( sprite_index, image_index, 
                    x - tHalfWidth + tWidthTiltOffset, y - floatOffset_current - tHalfHeight + tHeightTiltOffset,
                    x + tHalfWidth - tWidthTiltOffset, y - floatOffset_current - tHalfHeight + tHeightTiltOffset,
                    x + tHalfWidth + tWidthTiltOffset, y - floatOffset_current + tHalfHeight - tHeightTiltOffset,
                    x - tHalfWidth - tWidthTiltOffset, y - floatOffset_current + tHalfHeight - tHeightTiltOffset,
                    
                    1 - smallSpriteAlpha_current );
                    
draw_sprite_pos( smallSprite, image_index, 
                    x - tHalfWidth + tWidthTiltOffset, y - floatOffset_current - tHalfHeight + tHeightTiltOffset,
                    x + tHalfWidth - tWidthTiltOffset, y - floatOffset_current - tHalfHeight + tHeightTiltOffset,
                    x + tHalfWidth + tWidthTiltOffset, y - floatOffset_current + tHalfHeight - tHeightTiltOffset,
                    x - tHalfWidth - tWidthTiltOffset, y - floatOffset_current + tHalfHeight - tHeightTiltOffset,
                    
                    smallSpriteAlpha_current );

draw_set_alpha( 1 - smallSpriteAlpha_current );
draw_set_font( letter_ft );
draw_set_color( c_black );
draw_set_halign( fa_right );
draw_set_valign( fa_top );

draw_text_transformed( x + tHalfWidth - 8, y - floatOffset_current - tHalfHeight + 8, text,
                        image_xscale, image_yscale, 0 );
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
