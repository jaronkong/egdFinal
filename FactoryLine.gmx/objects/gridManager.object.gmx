<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>1</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Define grid size

var s = 32;
width = s;
height = s;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create the grid

grid = ds_grid_create(
    ceil( room_width / width ),
    ceil( room_height / height )
);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Remove the grid

ds_grid_destroy( grid );
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Reset the grid

ds_grid_clear( grid, noone );
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Include all blocks

var tGrid = grid;

with ( block ) {
    if ( !gridValidPoint( x, y ) ) continue;
    var cx = gridFromRoomX( x );
    var cy = gridFromRoomY( y );
    ds_grid_set( tGrid, cx, cy, id );
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Check for item collisions

var tGrid = grid;

with ( item ) {
    if ( !gridValidPoint( x, y ) ) continue;
    var tInst, cx, cy;
    
    //Push out of any nearby blocks
    cx = gridFromRoomX( x );
    cy = gridFromRoomY( y );
    //Top
    if ( ( y - height/2 ) &lt;= gridToRoomY( cy - 0.5 ) ) {
        if ( instance_exists( gridBlockAtPoint( x, y - other.height ) ) ) {
            y = ( gridToRoomY( cy - 0.5 ) + height/2 );
            vspeed = max( 0, vspeed );
        }
    }
    //Bottom
    if ( ( y + height/2 ) &gt; gridToRoomY( cy + 0.5 ) ) {
        if ( instance_exists( gridBlockAtPoint( x, y + other.height ) ) ) {
            y = ( gridToRoomY( cy + 0.5 ) - height/2 );
            vspeed = min( 0, vspeed );
        }
    }
    //Left
    if ( ( x - width/2 ) &lt;= gridToRoomX( cx - 0.5 ) ) {
        if ( instance_exists( gridBlockAtPoint( x - other.width, y ) ) ) {
            x = ( gridToRoomX( cx - 0.5 ) + width/2 );
            hspeed = max( 0, hspeed );
        }
    }
    //Right
    if ( ( x + width/2 ) &gt; gridToRoomX( cx + 0.5 ) ) {
        if ( instance_exists( gridBlockAtPoint( x + other.width, y ) ) ) {
            x = ( gridToRoomX( cx + 0.5 ) - width/2 );
            hspeed = min( 0, hspeed );
        }
    }
    
    //Check for item collisions
    tInst = gridItemAtPoint( x, y );
    if ( instance_exists( tInst ) ) {
        var tNew = instance_create( mean( x, tInst.x ), mean( y, tInst.y ), item );
        tNew.hspeed = mean( hspeed, tInst.hspeed );
        tNew.vspeed = mean( vspeed, tInst.vspeed );
        with ( tInst ) instance_destroy( );
        instance_destroy( );
        ds_grid_set( tGrid, cx, cy, tNew );
    } else {
        ds_grid_set( tGrid, cx, cy, id );
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw gridlines

draw_set_color( c_white );
draw_set_alpha( 1 );

draw_primitive_begin( pr_linelist );

for ( var i = 0; i &lt; ds_grid_width( grid ); ++i ) {
    draw_vertex( i * width, 0 );
    draw_vertex( i * width, room_height );
}

for ( var j = 0; j &lt; ds_grid_height( grid ); ++j ) {
    draw_vertex( 0, j * height );
    draw_vertex( room_width, j * height );
}

draw_primitive_end( );

draw_set_color( c_white );
draw_set_alpha( 1 );
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Fill in object grid cells

draw_set_color( c_white );
draw_set_alpha( 1 );

for ( var i = 0; i &lt; ds_grid_width( grid ); ++i ) {
    for ( var j = 0; j &lt; ds_grid_height( grid ); ++j ) {
        var tInst = ds_grid_get( grid, i, j );
        if ( instance_exists( tInst ) ) {
            var px = gridToRoomX( i );
            var py = gridToRoomY( j );
            if ( isObject( tInst, block ) ) {
                draw_set_color( c_aqua );
            } else if ( isObject( tInst, item ) ) {
                draw_set_color( c_lime );
            } else {
                draw_set_color( c_red );
            }
            draw_rectangle( px-width/2, py-height/2,
                px+width/2, py+height/2, false );
        }
    }
}

draw_set_color( c_white );
draw_set_alpha( 1 );
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
