<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>block_spr</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Setup

heldItem = noone;
image = noone;
originTraySection = noone;

previewScaling = 0.25; //size of image in tray

alpha = 0.5;
heldAlpha = 0.5;

held = false;
heldStartX = x;
heldStartY = y;

targetX = x;
targetY = y;
moveTween = 0.3;
prevX = x;
prevY = y;

//Grabbing
grabOffset = 0;
grabOffsetMax = 64;
grabOffsetTween = 0.25;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Lock to mouse

if ( held ) {
    alpha = heldAlpha;
    targetX = mouse_x;
    targetY = mouse_y;
    
    if ( instance_exists( gridManager ) ) {
        var tGridCon = gridManager;
        var tGridSize = tGridCon.width;
        var tOffX = targetX mod tGridSize;
        var tOffY = targetY mod tGridSize;
        
        if ( tOffX &gt; tGridSize / 2 ) {
            targetX += tGridSize;
        }
        if ( tOffY &gt; tGridSize / 2 ) {
            targetY += tGridSize;
        }
        targetX = gridToRoomX( gridFromRoomX( mouse_x ));//tGridSize * (targetX div tGridSize);
        targetY = gridToRoomY( gridFromRoomY( mouse_y ));//tGridSize * (targetY div tGridSize );

        //Check if different from prev coord, and play sound if changed
        if ( targetX != prevX || targetY != prevY ) {
            audio_play_sound( craneMove_sd, 1, false );
        }
        prevX = targetX;
        prevY = targetY;
                
        //Add in offset for crane bounce
        targetY += grabOffset;
        
        with ( heldItem ) {
            x = other.x;
            y = other.y;
        }  
    }
}
else {
    alpha = 1;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>placeableItem</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Drag control

if ( mouse_check_button( mb_left ) ) {
    if ( mouse_x &gt; x - sprite_get_width( image )/2 &amp;&amp; mouse_x &lt; x + sprite_get_width( image )/2
        &amp;&amp; mouse_y &gt; y - sprite_get_height( image )/2 &amp;&amp; mouse_y &lt; y + sprite_get_height( image )/2 ) {
        
        if ( !held ) {
            //Grabbing for first time
            grabOffset = grabOffsetMax;
            audio_play_sound( craneSlam_sd, 1, false );
            /*
            if ( !instance_exists( heldItem ) &amp;&amp; heldItem != noone) {
                instance_create( x, y, heldItem );
            }
            */
        }
        held = true;   
    }
}
else if ( mouse_check_button_released( mb_left ) ){
    placeItemAttempt( id );
    
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Tweens

grabOffset = lerp( grabOffset, 0, grabOffsetTween );
x = lerp( x, targetX, moveTween );
y = lerp( y, targetY, moveTween );

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw

if ( held ) {
    draw_sprite_ext( craneArm_spr, 0, 
                x, y - sprite_get_height( image )/2 * image_yscale,
                1, 1, 0, c_white, 1 );
    
    if ( isPlaceableLocation( targetX, targetY, heldItem ) ) {
        draw_sprite_ext( image, 0, x, y, image_xscale, image_yscale, 0, c_white, alpha);
    }
    else {
        draw_sprite_ext( image, 0, x, y, image_xscale, image_yscale, 0, c_red, alpha);
    }
    
}
else {
    draw_sprite_ext( image, 0, x, y, previewScaling, previewScaling, 0, c_white, alpha);

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
