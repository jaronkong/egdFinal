<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Setup

global.fluidWidth = room_width / 4;
global.fluidHeight = room_height / 4;
global.fluidRatio = global.fluidWidth / room_width;

global.fluidTimestep = 0.125; //0.125
global.numJacobiIterations = 30;
global.ambientTemperature = 0;

global.velocityDissipation = 0.99//0.99;
global.temperatureDissipation = 0.99//0.99;
global.densityDissipation = 0.99//0.99;

global.smokeWeight = 0.02;
global.smokeBuoyancy = 0.7;

global.splatRadius = 48;
global.splatX = 200;
global.splatY = 400;
global.impulseTemperature = 10;
global.impulseDensity = 1;
global.cellSize = 1.25; //1.25

global.gradientScale = 0.8;//1.125 / global.cellSize;

global.showDebug = false;

//texture_set_blending(false);
//draw_set_alpha_test(true);
//draw_set_alpha_test_ref_value(1);
//texture_set_repeat(true);

velocity = fluidCreateSlab( "velocity", global.fluidWidth, global.fluidHeight );
density = fluidCreateSlab( "density", global.fluidWidth, global.fluidHeight );
pressure = fluidCreateSlab( "pressure", global.fluidWidth, global.fluidHeight );
temperature = fluidCreateSlab( "temperature", global.fluidWidth, global.fluidHeight );

stageSurface = -1; //application surface is cleared after every frame, use this for results

divergence = -1;
obstacles = -1;

mousePrevX = mouse_x;
mousePrevY = mouse_y;

drawPosX = 0;
drawPosY = 0;

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Drawing things

obstacleQueue = ds_queue_create();
drawQueue = ds_queue_create();

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Clean up

ds_queue_destroy( obstacleQueue );
ds_queue_destroy( drawQueue );

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Make sure surfaces exist

if ( !surface_exists( obstacles ) ) {
    obstacles = surface_create( global.fluidWidth, global.fluidHeight );

}
if ( !surface_exists( divergence ) ) {
    divergence = surface_create( global.fluidWidth, global.fluidHeight );
    surface_set_target( divergence );
        draw_clear_alpha( make_color_rgb( 127.5, 127.5, 127.5), 1.0 );
    surface_reset_target();
}
if ( !surface_exists( stageSurface ) ) {
    stageSurface = surface_create( global.fluidWidth, global.fluidHeight );
    surface_set_target( stageSurface );
        draw_clear_alpha( c_black, 0.0 );
    surface_reset_target();
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Obstacles


//Obstacle
surface_set_target( obstacles );
draw_clear_alpha( c_black, 1.0 );
while ( !ds_queue_empty( obstacleQueue ) ) {
    var tCurrentObj = ds_queue_dequeue( obstacleQueue );
    
    d3d_set_projection_ortho( view_xview[0], view_yview[0], view_wview[0], view_hview[0], view_angle[0] );
        with ( tCurrentObj ) {
            d3d_set_fog( true, make_color_rgb( 255, 127.5, 127.5 ), depth, depth );      
            event_user( 0 );
            d3d_set_fog( false, make_color_rgb( 255, 127.5, 127.5 ), depth, depth );
        }        
   
}
surface_reset_target();
/*
surface_set_target( obstacles );
    draw_clear_alpha( c_black, 1.0 );
    
    var tXSpeed = mouse_x - mousePrevX;
    var tYSpeed = mouse_y - mousePrevY;
    var tMaxSpeed = 64;
    
    var tXVal = 0.5 * tXSpeed / tMaxSpeed;
    var tYVal = 0.5 * tYSpeed / tMaxSpeed;
    
    tXVal += 0.5;
    tXVal *= 255;
    tYVal += 0.5;
    tYVal *= 255;
    
    //draw_set_color( make_color_rgb( 255, 127.5, 127.5 ) );
    draw_set_color( make_color_rgb( 255, tXVal, tYVal ) );
    
    draw_circle( drawPosX + mouse_x * global.fluidRatio, 
                drawPosY + mouse_y * global.fluidRatio, 
                32, false );
                

    
    mousePrevX = mouse_x;
    mousePrevY = mouse_y;
    
    
surface_reset_target();
*/
//draw_circle( mouse_x , mouse_y , 32, true );
//draw_rectangle( mouse_x, mouse_y, 
//                    mouse_x + 100, mouse_y + 32, true );

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw

//fluidApplyImpulse( temperature.ping, global.splatX, global.splatY, global.impulseTemperature );
//fluidApplyImpulse( density.ping, global.splatX, global.splatY, global.impulseDensity );


fluidAdvect( velocity.ping, velocity.ping, obstacles, velocity.pong, global.velocityDissipation );
fluidSwapSlab( velocity );

fluidAdvect( velocity.ping, temperature.ping, obstacles, temperature.pong, global.temperatureDissipation );
fluidSwapSlab( temperature );

fluidAdvect( velocity.ping, density.ping, obstacles, density.pong, global.densityDissipation );
fluidSwapSlab( density );

fluidApplyBuoyancy( velocity.ping, temperature.ping, density.ping, velocity.pong );
fluidSwapSlab( velocity );

while ( !ds_queue_empty( drawQueue ) ) {
    var tCurrentObj = ds_queue_dequeue( drawQueue );
    surface_set_target( temperature.ping );
    d3d_set_projection_ortho( view_xview[0], view_yview[0], view_wview[0], view_hview[0], view_angle[0] );
        with ( tCurrentObj ) {
            event_user( 0 );
        }
        /*
        draw_set_color( make_color_rgb( 255, 255, 255 ) );
        draw_circle( drawPosX + mouse_x, 
                        drawPosY + mouse_y, 
                        8, false );
        */              
    surface_reset_target();
    surface_set_target( density.ping );
    d3d_set_projection_ortho( view_xview[0], view_yview[0], view_wview[0], view_hview[0], view_angle[0] );

        with ( tCurrentObj ) {
            event_user( 0 );
        }
        /*
        draw_set_color( make_color_rgb( 255, 255, 255 ) );
        draw_circle( drawPosX + mouse_x, 
                        drawPosY + mouse_y, 
                        8, false );
        */                
    surface_reset_target();
}


//fluidApplyImpulse( temperature.ping, global.splatX, global.splatY, global.impulseTemperature );
//fluidApplyImpulse( density.ping, global.splatX, global.splatY, global.impulseDensity );

fluidComputeDivergence( velocity.ping, obstacles, divergence );
fluidClearSurface( pressure.ping );

for ( var i = 0; i &lt; global.numJacobiIterations; ++i ) {
    fluidJacobi( pressure.ping, divergence, obstacles, pressure.pong );
    fluidSwapSlab( pressure );
}

fluidSubtractGradient( velocity.ping, pressure.ping, obstacles, velocity.pong );
fluidSwapSlab( velocity );

surface_set_target( stageSurface );
    draw_clear_alpha( c_white, 0.0 );
    fluidDrawFinal( density.ping );
surface_reset_target();


//fluidDrawFinal( density.ping );
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw final fluid


//Draw fluid
draw_surface_stretched( stageSurface, drawPosX, drawPosY, room_width, room_height );
//draw_surface_stretched( stageSurface, drawPosX, drawPosY, room_width, room_height );
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="76">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Add to effect queues

bloom_addToQueue( id, -50 );
//refraction_addToQueue( id );
//distortionGlow_addToQueue( id );

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw

event_user( 1 );
event_user( 0 );

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Debug

if ( global.showDebug ) {

    var tCounter = 0;
    with ( fluidSlab ) {
        
        
        if ( surface_exists( ping ) &amp;&amp; surface_exists( pong ) ) {
            draw_surface_stretched( ping, 200*tCounter, 0, 200, 175 );
            draw_surface_stretched( pong, 200*tCounter, 200, 200, 175 );
        }
        
        draw_set_color( c_white );
        draw_text( 200*tCounter, 0, name );
        
        tCounter ++;
    
    }
    
    if ( surface_exists( obstacles )  ) {
        draw_surface_stretched( obstacles, 0, view_hview - 200, 300, 200 );
        draw_set_color( c_white );
        draw_text( 0, view_hview - 200, "obstacles" );
    }
    if ( surface_exists( divergence )  ) {
        draw_surface_stretched( divergence, 300, view_hview - 200, 300, 200 );
        draw_set_color( c_white );
        draw_text( 300, view_hview - 200, "divergence" );
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="112">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Debug toggle

global.showDebug = !global.showDebug;

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
