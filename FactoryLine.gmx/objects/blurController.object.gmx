<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-100</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Setup

// surface that view[0] is drawn into.
_screenSurface = -1;
// surface that first pass of blur is drawn into.
_passSurface = -1;
// size/scale in pixels of blur.
_size = 2;

blurMap = surface_create( view_wview[0], view_hview[0] );

uScale = shader_get_uniform(blur_sdr, "uScale");
heightMap = shader_get_sampler_index(blur_sdr, "heightMap");
s_samp_height_uvs = shader_get_uniform( blur_sdr, "uvs_height" );

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Clean up
view_surface_id[0] = -1;
if(surface_exists(_screenSurface))
    surface_free(_screenSurface);
if(surface_exists(_passSurface))
    surface_free(_passSurface);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Intensity change
// change blur size/scale value.
if(keyboard_check_pressed(vk_left))
    _size = max(0, _size - 1);
if(keyboard_check_pressed(vk_right))
    _size = max(0, _size + 1);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw
// initialize temporary values.

var texScreen, texBase;

// create surfaces if not exists (i.e. context lost).
if(!surface_exists(_screenSurface))
{
    _screenSurface = surface_create(view_wview[0], view_hview[0]);
    // bind screen surface to view[0] so we can process whole scene rendered.
    view_surface_id[0] = _screenSurface;
}
if(!surface_exists(_passSurface)) {
    _passSurface = surface_create(view_wview[0], view_hview[0]);
}

// obtain uniforms and textures from surfaces.


var texScreen = surface_get_texture(_screenSurface);
var texPass = surface_get_texture(_passSurface);

// bind shader.
shader_set(blur_sdr);

if ( surface_exists( blurMap ) ) {
    texture_set_stage(heightMap, surface_get_texture( blurMap ));
}

// first pass - here we render horizontaly blured screen into first pass surface.
surface_set_target(_passSurface);
draw_clear_alpha(c_black, 0.0);
shader_set_uniform_f(uScale, texture_get_texel_width(texScreen) * _size, 0.0);
draw_surface(_screenSurface, 0, 0);
surface_reset_target();

// second pass - here we render verticaly blured first pass into screen.
shader_set_uniform_f(uScale, 0.0, texture_get_texel_height(texPass) * _size);
surface_set_target( application_surface );
draw_surface(_passSurface, view_xview[0], view_yview[0]);
surface_reset_target();
// reset to main shader.
shader_reset();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
