<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>itemTrayBaseTab_spr</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Setup

numSections = 3;
headHeight = 32; //Size of the tab on top of the trays
trayWidth = 64;
trayHeight = 64;

recoilFactor = 0.4; //Recoil upon hitting bounds.
currentSlideOffset = 0; //Is negative so things slide up
maxSlideOffset = headHeight + numSections*trayHeight;
currentSpeed = 0;
maxSpeed = 25;
accel = 1.5;

//Sounds
recoilVolSpeedThreshold = 2;
hitSoundLower = trayHitBottom_sd;
hitSoundUpper = trayHitBottom_sd;
recoilVolFactor = 0.05;

///States
mouseHover = false;

event_user( 0 );

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Update States

if ( mouse_x &gt; x - trayWidth/2 &amp;&amp; mouse_x &lt; x + trayWidth / 2 
        &amp;&amp; mouse_y &gt; y + currentSlideOffset - headHeight &amp;&amp; mouse_y &lt; y + headHeight / 2 ) {

    if ( !mouseHover ) {
        audio_play_sound( trayOpen_sd, 1, false );
        instance_create( x, y, smokeTrayEmerge );
    }
    mouseHover = true;
}
else {
    if ( mouseHover ) {
        audio_play_sound( trayClose_sd, 1, false );
    }   
    mouseHover = false;
}



</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Slide out

if ( currentSpeed != 0 ) {
    if ( abs(currentSpeed) &gt; maxSpeed ) {
        currentSpeed = maxSpeed * sign( currentSpeed );
    }
    currentSlideOffset += currentSpeed;
    
    //Bounce on hitting edges
    if ( abs( currentSlideOffset ) &gt; maxSlideOffset ) {
        currentSlideOffset = -maxSlideOffset;
        currentSpeed *= recoilFactor;
        currentSpeed *= -1;
        if ( abs( currentSpeed ) &gt; recoilVolSpeedThreshold ) {
            audio_sound_gain( hitSoundUpper, min( recoilVolFactor * abs(currentSpeed), 1 ), 0 );
            audio_play_sound( hitSoundUpper, 1, false );
        }
    }
    if ( currentSlideOffset &gt; 0 ) {
        currentSlideOffset = 0;
        currentSpeed *= recoilFactor;
        currentSpeed *= -1;
        if ( abs( currentSpeed ) &gt; recoilVolSpeedThreshold ) {
            audio_sound_gain( hitSoundLower, min( recoilVolFactor * abs(currentSpeed), 1 ), 0 );
            audio_play_sound( hitSoundLower, 1, false );
        }
    }
    
}

if ( mouseHover ) {
    currentSpeed -= accel;

}
else {
    currentSpeed += accel;
    
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize trays

for ( var i = 0; i &lt; numSections; ++i ) {
    with ( instance_create( x, y, traySection ) ) {
        sectionOffset = i * sectionHeight;
        ownerTray = other.id;
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw

//Draw the head tab
draw_sprite( itemTrayHead_spr, 0, x, y + currentSlideOffset );


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
